{
  "success": false,
  "error": "PyTorch CUDA extension compilation failed: Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"<string>\", line 47, in <module>\nTypeError: load_inline() got an unexpected keyword argument 'source'\n",
  "provider": "colab",
  "timestamp": 1758478216.0154014,
  "corrected_code": "import torch\nimport torch.nn as nn\nfrom torch.utils.cpp_extension import load_inline\n\n# CUDA kernel code\nkernel_code = \"\"\"\n#include <torch/extension.h>\n\n#define BLOCK_SIZE 32\n\n__global__ void matmul_kernel(const float *A, const float *B, float *C, int M, int N, int K) {\n  int row = blockIdx.y * blockDim.y + threadIdx.y;\n  int col = blockIdx.x * blockDim.x + threadIdx.x;\n\n  if (row < M && col < N) {\n    float sum = 0.0f;\n    for (int k = 0; k < K; ++k) {\n      sum += A[row * K + k] * B[k * N + col];\n    }\n    C[row * N + col] = sum;\n  }\n}\n\nstd::vector<torch::Tensor> matmul_wrapper(torch::Tensor A, torch::Tensor B) {\n  int M = A.size(0);\n  int K = A.size(1);\n  int N = B.size(1);\n\n  auto C = torch::zeros({M, N}, A.options());\n\n  dim3 blockDim(BLOCK_SIZE, BLOCK_SIZE);\n  dim3 gridDim((N + BLOCK_SIZE - 1) / BLOCK_SIZE, (M + BLOCK_SIZE - 1) / BLOCK_SIZE);\n\n  matmul_kernel<<<gridDim, blockDim>>>(A.data_ptr<float>(), B.data_ptr<float>(), C.data_ptr<float>(), M, N, K);\n\n  cudaDeviceSynchronize();\n  return {C};\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n  m.def(\"matmul_wrapper\", &matmul_wrapper, \"Matrix multiplication kernel\");\n}\n\"\"\"\n\n# Load the CUDA kernel\ntry:\n    matmul_module = load_inline(\n        name=\"matmul_cuda\",\n        source=kernel_code,\n        verbose=True,\n        with_cuda=True,\n        extra_cflags=['-O3', '-std=c++14']\n    )\nexcept RuntimeError as e:\n    print(f\"Error loading CUDA kernel: {e}\")\n    exit(1)\n\n\ndef custom_matmul(A, B):\n    \"\"\"\n    Python wrapper for the custom CUDA matrix multiplication kernel.\n    \"\"\"\n    if not torch.cuda.is_available():\n        raise RuntimeError(\"CUDA is not available.\")\n\n    if A.device != torch.device(\"cuda\") or B.device != torch.device(\"cuda\"):\n        raise RuntimeError(\"Input tensors must be on CUDA device.\")\n    \n    if A.dtype != torch.float32 or B.dtype != torch.float32:\n        raise RuntimeError(\"Input tensors must be of type torch.float32\")\n\n    try:\n        result = matmul_module.matmul_wrapper(A, B)\n        return result[0]  #Return the first tensor from the vector\n    except RuntimeError as e:\n        print(f\"Error during CUDA kernel execution: {e}\")\n        exit(1)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        device = torch.device(\"cuda\")\n        A = torch.randn(1024, 512, device=device, dtype=torch.float32)\n        B = torch.randn(512, 2048, device=device, dtype=torch.float32)\n\n        C = custom_matmul(A, B)\n        print(\"Result shape:\", C.shape)\n        #Further verification or usage of C can be added here.\n\n    except RuntimeError as e:\n        print(f\"An error occured: {e}\")"
}